// semaphore standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once

#ifndef _SEMAPHORE_
#define _SEMAPHORE_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR

#if !_HAS_CXX20
#pragma message("The contents of <semaphore> are available only with C++20 or later.")
#else // ^^^ !_HAS_CXX20 / _HAS_CXX20 vvv
#include <atomic>
#include <chrono>
#include <cstddef>
#include <exception>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new

_EXTERN_C
void __stdcall __std_semaphore_init_values() noexcept;
char __stdcall __std_semaphore_wait_on_ullong_timed(_In_ const volatile unsigned long long* _Address,
    _In_ unsigned long long _Compare, _In_ unsigned long _Time) noexcept;
char __stdcall __std_semaphore_wait_on_ulong_timed(
    _In_ const volatile unsigned long* _Address, _In_ unsigned long _Compare, _In_ unsigned long _Time) noexcept;
void __stdcall __std_semaphore_wake_by_address(_In_ const volatile void* _Address) noexcept;
_END_EXTERN_C

_STD_BEGIN
template <ptrdiff_t _LeastMaxValue = 256>
class counting_semaphore {
public:
    static constexpr ptrdiff_t(max)() noexcept {
        // _LeastMaxValue is used here so that things such as binary_semaphore are limited to the max value of its
        // specialization
        return _LeastMaxValue;
    }
    constexpr explicit counting_semaphore(ptrdiff_t _Desired) : _Counter(_Desired) {
        _STL_ASSERT(_Desired >= 0 && _Desired <= max(),
            "Desired value for the semaphore falls outside of the maximum semaphore range");
    }
    ~counting_semaphore()                         = default;
    counting_semaphore(const counting_semaphore&) = delete;
    counting_semaphore& operator=(const counting_semaphore&) = delete;

    void release(ptrdiff_t _Update = 1) {
        // Note: This assert does not check if _Update is less than or equal to max() - _Counter as required by the
        // standard since by the time that check happens the value could have changed and we wouldn't know about it
        // (According to Billy O'Neal). Granted, if you accidentally have more releases() than acquires that's your own
        // fault, but we can't actually punish you for it because of this.
        _STL_ASSERT(_Update >= 0, "You cannot release a negative value for semaphores");
        __std_semaphore_init_values();
        _Counter.fetch_add(_Update);
        __std_semaphore_wake_by_address(&_Counter._Storage._Value);
    }
    void acquire() {
        while (!try_acquire()) {
            ptrdiff_t _Undesired = 0;
            if constexpr (sizeof(ptrdiff_t) == sizeof(unsigned long long)) {
                switch (__std_semaphore_wait_on_ullong_timed(&_Counter._Storage._Value, &_Undesired, _Infinite_Wait)) {
                case 0:
                    break;
                default:
                    // implement exceptions here, we can add cases for other stuff as well
                    break;
                }
                // This, just like in try_acquire_for, needs to be moved to a .cpp file, except we can call a
                // noreturn function here to optimize it better
            } else if (sizeof(ptrdiff_t) == sizeof(unsigned long)) {
                switch (__std_semaphore_wait_on_ulong_timed(&_Counter._Storage._Value, &_Undesired, _Infinite_Wait)) {
                case 0:
                    break;
                default:
                    // implement exceptions here
                    break;
                }
            }
        }
    }
    bool try_acquire() noexcept {
        __std_semaphore_init_values();
        // This doesn't require a loop since if this fails even once we're allowed to yeet ourselves out of the function
        // by the standard
        ptrdiff_t _Old     = _Counter.load();
        ptrdiff_t _Desired = _Old - 1;
        if (_Old > 0 && _Counter.compare_exchange_strong(_Old, _Desired)) {
            return true;
        }
        return false;
    }
    template <class _Rep, class _Period>
    bool try_acquire_for(const chrono::duration<_Rep, _Period>& _Rel_time) {
        while (!try_acquire()) {
            ptrdiff_t _Undesired = 0;
            if constexpr (sizeof(ptrdiff_t) == sizeof(long long)) {
                switch (__std_semaphore_wait_on_ullong_timed(
                    &_Counter._Storage._Value, &_Undesired, chrono::duration_cast<milli>(_Rel_time))) {
                case 0:
                    break;
                case 1:
                    return false;
                default:
                    // implement errors
                    break;
                }
            } else if (sizeof(ptrdiff_t) == sizeof(long)) {
                switch (__std_semaphore_wait_on_ulong_timed(
                    &_Counter._Storage._Value, &_Undesired, chrono::duration_cast<milli>(_Rel_time))) {
                case 0:
                    break;
                case 1:
                    return false;
                default:
                    // implement errors
                    break;
                }
            }
        }
        return true;
    }
    template <class _Clock, class _Duration>
    bool try_acquire_until(const chrono::time_point<_Clock, _Duration>& _Abs_time) {
        return try_acquire_for(_Clock::now() - _Abs_time);
    }

private:
    atomic<ptrdiff_t> _Counter;
    constexpr unsigned long _Infinite_Wait = 0xFFFFFFFF;
};
using binary_semaphore = counting_semaphore<1>;
_STD_END
#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)
#endif
#endif
#endif
